            lw          0           1          valN         #load n
            lw          0           2          valR         #load r
            lw          0           6          AdcbIn       #load combination on reg 6
            lw          0           4           one         #load 1
            jalr        6           7                      
stop        halt
comInp      sw         5            7            stack        #save return address on stack
            add        4            5            5            #increment stack pointer add 5 on stack
            sw         5            2            stack        #save r on stack
            add        4            5            5            #increment stack pointer add 5 on stack
            sw         5            1            stack        #save n on stack
            add        4            5            5            #increment stack pointer add 5 on stack
combiIF     beq        1            2            comRt        #if r = 0 or n = r jump comRt
            beq        0            2            comRt        
combi-1     lw         0            6            neg1         #load -1  
            add        6            1            1            #n-
            lw         0            6            AdcbIn
            jalr       6            7
            add        6            5            5             
            lw         5            1            stack         #load n to stack
            add        6            1            1             #n--
            add        6            5            5
            lw         5            2            stack         #load r to stack
            add        6            2            2             #r--
            lw         0            6            AdcbIn
            add        4            5            5
            add        4            5            5
            jalr       6            7
            lw         0            6            AdcbP
            jalr       6            7
comRt       add        4            3            3             #return            
comPop      lw         0            6            neg1          #load -1 
            add        6            5            5             
            add        6            5            5
            add        6            5            5
            lw         5            7            stack
            jalr       7            0
valN        .fill       7
valR        .fill       3
AdcbIn      .fill       comInp              #combination input
AdcbRt      .fill       comRt               #combination return
AdcbP       .fill       comPop              #combination pop
one         .fill       1                   
neg1        .fill       -1                  
stack       .fill       0                  #beginning of stack (value is irrelevant)